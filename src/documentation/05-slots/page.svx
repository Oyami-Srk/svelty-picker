---
title: Slots
---

For better picture what parts of picker are overrideable by slots there is rough DOM structure (class names are only for descriptive purpose only):

```html
<span class="relative-positioned-wrap">
    <!-- SLOT="inputs" -->
    <input type="hidden">
    <input type="text">
    <!-- SLOT end -->
    <div class="popup">
        <div class="widget-wraps">
            <Calendar_or_Time />
        </div>
        <!-- SLOT="action-row"-->
        <div>
            <!-- Today/clear &  Cancel/OK buttons -->
        </div>
        <!-- SLOT end -->
    </div>
</span>
```
As can be seen in code above there are 2 available slots. Event handlers have prefix `on`.

### inputs

There are mutliple exposed props to be able to fully replace default implementation

- `value` - selected date/range string representation
- `displayValue` - formatted selection used for display (especially useful, when `displayFormat` is being used)
- `disabled` - disabled property value (maybe useless :))
- `isDirty` - if currently selected value is different than the previous one (applicable only when `autocommit` = `false`)
- `onKeyDown` - key event handler
- `onInputFocus` - focus handler - shows popup
- `onInputBlur` - hides popup if active

### action-row

And here again, all props and handlers needed to recreate even the default implementation*

- `onCancel` - discards current selection
- `onConfirm` - handler which confirms current selection (for manually committed changes)
- `onClear` - clears current selection
- `onToday` - selects today date
- `isTodayDisabled` - useful when you use `startDate` or `endDate` or `disableDatesFn` to disable dates. Serves for disabled 'Today' button
- `currentMode` - returns currently active mode: `date` or `time` 
- `i18n` - current locale

* Default implementation relies also on `isRange` and `autocommit` props, which you will probably provide yourself if needed.

In examples below default slot implementation is being shown.

